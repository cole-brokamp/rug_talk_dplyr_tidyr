---
title: "Data Wrangling in R with `dplyr` and `tidyr`"
subtitle: "CCHMC R Users Group"
author: "Cole Brokamp"
date: 2023-10-11
format: 
  revealjs:
    theme: cole.scss
    standalone: true
    embed-resources: true
---

## üëã &nbsp; Welcome

&nbsp;

[Join](https://outlook.office365.com/owa/r@cchmc.onmicrosoft.com/groupsubscription.ashx?action=join) the RUG Outlook group for updates and events: &nbsp;<https://t.ly/vRw7y>

&nbsp;


![](figs/join_rug.png)

## *Informal poll from last meeting*

:::: {.columns}

::: {.column width="25%"}

:::

::: {.column width="50%"}

![](figs/rug_poll.png){fig-align="center"}

:::

::::

## Tidy Data Wrangling in R with {dplyr} and {tidyr}

:::: {.columns}

::: {.column width="25%"}
![](https://tidyr.tidyverse.org/logo.png){width=80%}

![](https://dplyr.tidyverse.org/logo.png){width=80%}
:::

::: {.column width="75%"}

`tidyr` (version `r packageVersion("tidyr")`): *Create tidy data*

<https://tidyr.tidyverse.org>

[{tidyr} cheatsheet](https://rstudio.github.io/cheatsheets/html/tidyr.html)

&nbsp;

`dplyr` (version `r packageVersion("dplyr")`): *Tidy data manipulation*

<https://dplyr.tidyverse.org> 

[{dplyr} cheatsheet](https://rstudio.github.io/cheatsheets/html/data-transformation.html)

:::

::::

## Tidy Data

{dplyr}, {tidyr}, and generally all tidyverse functions expect tidy data: 

![](https://r4ds.hadley.nz/images/tidy-1.png){width=100%}

Tidy data works well with pipes: `x |> f(y)` becomes `f(x,y)`

&nbsp;&nbsp;&nbsp;R for Data Science (2e): <https://r4ds.hadley.nz/>

## Tidying Data with {tidyr}

**[pivoting](https://tidyr.tidyverse.org/articles/pivot.html)**

&nbsp;&nbsp;&nbsp;&nbsp;`pivot_longer()`, `pivot_wider()`

**[rectangling](https://tidyr.tidyverse.org/articles/rectangle.html)**

&nbsp;&nbsp;&nbsp;&nbsp;`unnest_longer()`, `unnest_wider()`, `hoist()`

**split and combine character columns**

&nbsp;&nbsp;&nbsp;&nbsp;`separate()`, `extract()`, `unite()`

**missing values helpers**

&nbsp;&nbsp;&nbsp;&nbsp;`complete()`, `drop_na()`, `fill()`, `replace_na()`

## Manipulating Data with {dplyr}


`select()` picks variables based on their names

`filter()` picks cases based on their values

`mutate()` adds new variables that are functions of existing variables

`summarise()` reduces multiple values down to a single summary

## Tidy Evaluation

**data masking**: use data variables as if they were variables in the environment

&nbsp;&nbsp;&nbsp;&nbsp;`my_variable` instead of `my_df$my_variable`

**tidy selection**: choose variables based on name, position, type

&nbsp;&nbsp;&nbsp;&nbsp;`starts_with("x")` or `is.numeric`
  
## Example Data from CoDEC

```{r}
#| echo: true
library(dplyr, warn.conflicts = FALSE)

# install.packages('codec', repos = c('https://geomarker-io.r-universe.dev', 'https://cloud.r-project.org'))
d <- codec::codec_data("hh_acs_measures")

codec::glimpse_attr(d)
```

## `select()` & `filter()`

```{r}
#| echo: true
d <-
  d |>
  select(-median_income, -median_home_value) |>
  filter(year >= 2016) |>
  select(-ends_with("_moe"))
d
```

## `mutate()` & `rename()`

```{r}
#| echo: true
d <-
  d |>
  mutate(marginalized_population_percentage =
           fraction_hl_w + fraction_hl_b + fraction_hl_o +
           fraction_nhl_b + fraction_nhl_o) |>
  rename(mpp = marginalized_population_percentage)
d
```

## `transmute()`

```{r}
#| echo: true
d <-
  d |>
  filter(year < 2020) |>
  transmute(census_tract_id = census_tract_id_2010,
            year,
            mpp,
            fraction_housing_renters,
            fraction_high_rent,
            fraction_fam_nospouse,
            fraction_employment,
            n_children_lt18,
            median_income_2010adj)
d
```

## `arrange()`: change ordering of observations

```{r}
#| echo: true
d |>
  arrange(desc(median_income_2010adj)) |>
  head()

```

## `summarise()`: reduce multiple values to a single summary

```{r}
#| echo: true
d |>
  summarise(total_children = sum(n_children_lt18),
            median_children = median(n_children_lt18),
            max_children = max(n_children_lt18),
            median_mpp = median(mpp))
```

## `group_by()`

```{r}
#| echo: true
d |>
  group_by(year)
```

## All functions designed to be paired with `group_by()`

```{r}
#| echo: true
d |>
  group_by(year) |>
  summarise(total_children = sum(n_children_lt18),
            median_children = median(n_children_lt18),
            max_children = max(n_children_lt18),
            median_mpp = median(mpp))
```

## `group_by()` multiple, "on the fly" variables

```{r}
#| echo: true
d |>
  group_by(year, high_mpp = mpp > median(mpp)) |>
  summarise(fraction_housing_renters = median(fraction_housing_renters),
            fraction_high_rent = median(fraction_high_rent),
            fraction_fam_nospouse = median(fraction_fam_nospouse),
            fraction_employment = median(fraction_employment))
```

## `across()`

```{r}
#| echo: true
d |>
  group_by(year, high_mpp = mpp > median(mpp)) |>
  summarise(across(c(starts_with("fraction")), median))
```

## Result of `summary()` is a `tibble`

```{r}
#| echo: true
d |>
  group_by(year, high_mpp = mpp > median(mpp)) |>
  summarise(across(c(starts_with("fraction"), mpp), median)) |>
  mutate(housing_burden = fraction_housing_renters^2 + fraction_high_rent) |>
  select(-fraction_housing_renters, -fraction_high_rent)
```

## Wrangle `summary()` output into a table

```{r}
#| echo: true
#| results: asis
d |>
  group_by(year, high_mpp = mpp > median(mpp)) |>
  summarise(across(c(starts_with("fraction"), mpp), median)) |>
  mutate(housing_burden = fraction_housing_renters^2 + fraction_high_rent) |>
  select(year, high_mpp, housing_burden) |>
  tidyr::pivot_wider(names_from = year, values_from = housing_burden) |>
  knitr::kable(digits = 2)
```

## Distinct observations

```{r}
#| echo: true
distinct(d, census_tract_id)
```
## Slicing observations

```{r}
#| echo: true
slice_head(d, n = 2)

slice_sample(d, prop = 0.1)
```

## Manipulate Observations

```{r}
#| echo: true
d |>
  group_by(census_tract_id) |>
  slice_min(fraction_employment, with_ties = FALSE)
```

## Combine Tables

```{r}
#| echo: true
d_411 <-
  codec::read_tdr_csv("https://github.com/geomarker-io/hamilton_property_code_enforcement/releases/download/0.1.3")

d <- left_join(d, d_411, by = join_by(census_tract_id == census_tract_id_2010))

tibble::glimpse(d)
```

## List-column workflow with `tidyr`

Create a `data` list-column using a combination of `dplyr::group_by()`, `tidyr::nest()`, `dplyr::nest_by()`, or `dplyr::rowwise()`


```{r}
#| echo: true
d <- d |> dplyr::nest_by(year)
d
```

## List structure

```{r}
#| echo: true
d$data[d$year == "2019"][[1]]
```

## `rowwise`

Use a `rowwise` tibble to apply non vectorized functions across list-cols

```{r}
#| echo: true
d |>
  mutate(
    lm = list(lm(fraction_high_rent ~ mpp + fraction_employment, data = data)),
    lm_pred = list(predict(lm, data))
  ) |>
  summarise(
    rmse = sqrt(mean((lm_pred - data$fraction_high_rent) ^ 2)),
    mae = median(abs(lm_pred - data$fraction_high_rent))
  ) |>
  knitr::kable(digits = 3)
```

## `broom::glance()`

`broom::glance()` is designed for extracting summary measures of modeling objects into tidy data frames

```{r}
#| echo: true
d |>
  mutate(lm = list(lm(fraction_high_rent ~ mpp + fraction_employment, data = data))) |>
  summarise(broom::glance(lm))
```

## `broom::tidy()`

... or model parameters

```{r}
#| echo: true
d |>
  mutate(lm = list(lm(fraction_high_rent ~ mpp + fraction_employment, data = data))) |>
  reframe(broom::tidy(lm))
```

## More `dplyr`

- tidyselect
- `across()`, `pick()`, `unpack()`
- offset, cumulative aggregate, ranking functions
- "SQL-esque" functions:  
  - `coalesce()`
  - `if_else()`
  - `na_if()`
  - `case_when()`

## `dplyr` data backends

- `arrow`: Apache Arrow
- `dtplyr`: use `data.table`
- `dbplyr`: use SQL
- `duckdb`: use DuckDB
- `sparklyr`: use Apache Spark

## `dplyr` "extensions"

- tibble and vctrs packages: sf, s2, tsibble, feasts, etc...

## Tidy Data + Tidy Evaluation

- presents challenges with programming with dplyr
  - [metaprogramming](https://adv-r.hadley.nz/metaprogramming.html)
  - [programming with dplyr](https://dplyr.tidyverse.org/articles/programming.html) 
- solutions
  - embrace operator (`{{`)
  - `.env$`, `.data$`
  - name injection and dynamic dots
  - tidyselect DSL

## Thank You

üåê [https://colebrokamp.com](https://colebrokamp.com)

üë®‚ÄçüíªÔ∏è [github.com/cole-brokamp](https://github.com/cole-brokamp)

üê¶ [@cole_brokamp](https://twitter.com/cole_brokamp)

üìß [cole.brokamp@cchmc.org](mailto:cole.brokamp@cchmc.org)



